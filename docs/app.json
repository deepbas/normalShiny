[{"name":"app.R","content":"library(shiny)\nlibrary(ggplot2)\n\nui <- fluidPage(\n  titlePanel(\"Normal Distribution Explorer\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"mean\", label = HTML(\"&mu; (Mean):\"), value = \"0\"),\n      textInput(\"sd\", label = HTML(\"&sigma; (Standard Deviation):\"), value = \"1\"),\n      uiOutput(\"lower_bound_ui\"),  \n      uiOutput(\"upper_bound_ui\"),  \n      checkboxInput(\"standard_normal\", \"Use Standard Normal Curve\", value = TRUE),\n      actionButton(\"update_plot\", \"Update Plot\")\n    ),\n    mainPanel(\n      plotOutput(\"norm_plot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  output$lower_bound_ui <- renderUI({\n    mean_val <- if(input$standard_normal) 0 else as.numeric(input$mean)\n    sd_val <- if(input$standard_normal) 1 else as.numeric(input$sd)\n    sliderInput(\"lower_bound\", \"Lower Bound:\", min = mean_val - 4 * sd_val, max = mean_val + 4 * sd_val, value = mean_val - sd_val)\n  })\n  \n  output$upper_bound_ui <- renderUI({\n    mean_val <- if(input$standard_normal) 0 else as.numeric(input$mean)\n    sd_val <- if(input$standard_normal) 1 else as.numeric(input$sd)\n    sliderInput(\"upper_bound\", \"Upper Bound:\", min = mean_val - 4 * sd_val, max = mean_val + 4 * sd_val, value = mean_val + sd_val)\n  })\n  \n  output$norm_plot <- renderPlot({\n    mean_val <- 0\n    sd_val <- 1\n    lower_bound <- -1\n    upper_bound <- 1\n    \n    data <- data.frame(x = c(mean_val - 4 * sd_val, mean_val + 4 * sd_val))\n    p <- ggplot(data, aes(x)) +\n      stat_function(fun = dnorm, args = list(mean = mean_val, sd = sd_val)) +\n      geom_area(stat = \"function\", fun = dnorm, args = list(mean = mean_val, sd = sd_val),\n                xlim = c(lower_bound, upper_bound), fill = \"blue\", alpha = 0.5) +\n      labs(title = \"Standard Normal Distribution Curve\") +\n      theme_minimal() +\n      xlab(\"x\") + ylab(\"Density\") +\n      geom_text(aes(x = (lower_bound + upper_bound) / 2, y = dnorm((lower_bound + upper_bound) / 2, mean = mean_val, sd = sd_val)), \n                label = sprintf(\"Shaded Area: %.4f\", diff(pnorm(c(lower_bound, upper_bound), mean = mean_val, sd = sd_val))), vjust = -1)\n    \n    return(p)\n  })\n  \n  observeEvent(input$update_plot, {\n    output$norm_plot <- renderPlot({\n      mean_val <- if(input$standard_normal) 0 else as.numeric(input$mean)\n      sd_val <- if(input$standard_normal) 1 else as.numeric(input$sd)\n      \n      data <- data.frame(x = c(mean_val - 4 * sd_val, mean_val + 4 * sd_val))\n      p <- ggplot(data, aes(x)) +\n        stat_function(fun = dnorm, args = list(mean = mean_val, sd = sd_val)) +\n        geom_area(stat = \"function\", fun = dnorm, args = list(mean = mean_val, sd = sd_val), \n                  xlim = c(input$lower_bound, input$upper_bound), fill = \"blue\", alpha = 0.5) +\n        labs(title = \"Normal Distribution Curve\") +\n        theme_minimal() +\n        xlab(\"x\") + ylab(\"Density\") +\n        geom_text(aes(x = (input$lower_bound + input$upper_bound) / 2, y = dnorm((input$lower_bound + input$upper_bound) / 2, mean = mean_val, sd = sd_val)), \n                  label = sprintf(\"Shaded Area: %.4f\", diff(pnorm(c(input$lower_bound, input$upper_bound), mean = mean_val, sd = sd_val))), vjust = -1)\n      \n      return(p)\n    })\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
